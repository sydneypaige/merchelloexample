@inherits MerchKit.Mvc.MerchKitTemplatePage
@using System.Diagnostics
@using Merchello.Core
@using Merchello.Core.Models

@{
    Layout = "merchBase.cshtml";

    var invoiceKey = string.IsNullOrEmpty( Request.QueryString["inv"]) ? Guid.Empty : new Guid(Request.QueryString["inv"].DecryptWithMachineKey());
    
    // Get the invoice    
    var invoice = MerchelloContext.Current.Services.InvoiceService.GetByKey(invoiceKey);
    if (invoice == null)
    {
        Response.Redirect(HomePage.Url);
    }

    Debug.Assert(invoice != null, "invoice != null");
    
    // We are planning on adding a few extension methods to assist in the retrieving the shipment information ...
    // get the shipment line item    
    var shipmentLineItem = invoice.Items.FirstOrDefault(x => x.LineItemType == LineItemType.Shipping);

    IShipment shipment = null;
    var shipmentName = "";
    if (shipmentLineItem != null)
    { 
        // there will be only one shipment in this version
        shipment = shipmentLineItem.ExtendedData.GetShipment<InvoiceLineItem>();
        shipmentName = shipmentLineItem.Name;
    }
}


<section id="primary">
    <h1>@Umbraco.GetDictionaryValue("merchReceiptHeadline")</h1>

    <section class="receipt">
        <p>@Umbraco.GetDictionaryValue("merchInvoiceNoLabel"): @invoice.PrefixedInvoiceNumber()</p>
        <p>@MvcHtmlString.Create(Umbraco.GetDictionaryValue("merchThanksParagraph"))</p>
            
        <h3>Billed To</h3>
        <span class="fn">@invoice.BillToName</span>
        <span class="adr">
            <span class="street-address">@invoice.BillToAddress1</span>
            <span class="extended-address">@invoice.BillToAddress2</span>
            <span class="locality">@invoice.BillToLocality</span>, <span class="region">@invoice.BillToRegion</span> <span class="postal-code">@invoice.BillToPostalCode</span>
            <span class="country-name">@GetCountryName(invoice.BillToCountryCode)</span>
        </span>
            
        @if (shipment != null)
        { 
            <h3>Shipped To</h3>
            <span class="fn">@shipment.ToName</span>
            <span class="adr">
                <span class="street-address">@shipment.ToAddress1</span>
                <span class="extended-address">@shipment.ToAddress2</span>
                <span class="locality">@shipment.ToLocality</span>, <span class="region">@shipment.ToRegion</span> <span class="postal-code">@shipment.ToPostalCode</span>
                <span class="country-name">@GetCountryName(shipment.ToCountryCode)</span>
            </span>
        }
        <table class="order-summary">
            @foreach (var item in invoice.Items.Where(x => x.LineItemType == LineItemType.Product))
            { 
                <tr class="product">
                    <td>@item.Name<span class="variant">x @item.Quantity @@ @item.Price.ToString("C")</span></td>
                    <td>@item.TotalPrice.ToString("C")</td>
                </tr>
            }
            <tr class="subtotal">
                <td>@Umbraco.GetDictionaryValue("merchSubtotalLabel")</td>
                <td>@invoice.TotalItemPrice().ToString("C")</td>
            </tr>
            <tr class="shipping">
                <td>@Umbraco.GetDictionaryValue("merchShippingLabel")<span class="variant">@shipmentName</span></td>
                <td>@invoice.TotalShipping().ToString("C")</td>
            </tr>
            <tr class="taxes">
                <td>@Umbraco.GetDictionaryValue("merchTaxesLabel")</td>
                <td>@invoice.TotalTax().ToString("C")</td>
            </tr>
    
            <tr class="total">
                <td>@Umbraco.GetDictionaryValue("merchTotalLabel")</td>
                <td>@invoice.Total.ToString("C")</td>
            </tr>
        </table>
    </section>

</section>

@functions
{

    private string GetCountryName(string countryCode)
    {
        return MerchelloContext.Current.Services.StoreSettingService.GetCountryByCode(countryCode).Name;
    }

}
    

